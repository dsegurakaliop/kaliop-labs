name: Build & Deploy to Scaleway

# Trigger the workflow manually via GitHub UI
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  ENV: "${{ github.ref == 'refs/heads/prod' && 'production' || 'preproduction' }}"
  BOT_NAME: "BOT_GIT"
  BOT_EMAIL: "infra@kaliop.com"
  COMMIT_MESSAGE: "Update tag"
  REPO_BRANCH: "main"
  REPO_DEPLOY: "github.com/dsegurakaliop/appofapps.git"
  REPO_DEPLOY_PROJECT: "appofapps"
  VALUE_ENV_TAG_FILE: "${{ github.ref == 'refs/heads/prod' && 'tag-prod.yaml' || 'tag-pprod.yaml' }}"
  ARGOCD_APP: "${{ github.ref == 'refs/heads/prod' && 'helloworld-prod' || 'helloworld-pprod' }}"
  ARGOCD_AUTH_TOKEN: "${{ github.ref == 'refs/heads/prod' && secrets.ARGOCD_PROD_TOKEN || secrets.ARGOCD_HORSPROD_TOKEN }}"
  APP_ID: "123456789"

jobs:
  build-helloworld-frontend:
    runs-on: ubuntu-latest
    env:
      APP: application-sample
      TYPE: frontend
      COMPONENT: kalioplabs
      DOCKERHUB_USERNAME: "kalioplabs"
      DOCKERHUB_REPO: "kalioplabs/labs"
    
    steps:
      # Step 1: Checkout the code from the repository
      - uses: actions/checkout@v4
      
      # Step 2: Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Step 3: Build the Docker image from the Dockerfile in the current directory
      - name: Build the Docker image
        run: docker build . -t ${{ env.DOCKERHUB_REPO }}/${{env.TYPE}}:${{env.COMPONENT}}:latest -f Dockerfile
      
      # Step 4: Scan the Docker image using Trivy for vulnerabilities
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKERHUB_REPO }}/${{env.TYPE}}:${{env.COMPONENT}}:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Step 5: Push the built Docker image to the Scaleway registry
      # - name: Push the Docker Image
      #   run: docker push ${{ vars.DOCKERHUB_REPO }}/${{env.TYPE}}:${{env.COMPONENT}}:latest

  ##### UPDATE TAG JOBS #####
  # update-tag-frontend:
  #   runs-on: ubuntu-latest
  #   needs: [build-helloworld-frontend]
  #   env:
  #     VALUE_ENV_TAG_PATH: charts/apps/helloworld/frontend
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     # - uses: getsentry/action-github-app-token@v3
  #     #   id: app-token
  #     #   with:
  #     #     app_id: ${{ env.APP_ID }}
  #     #     private_key: ${{ secrets.PRIVATE_KEY_RUNNER_GITHUB_APP }}
  #     - name: update-tag
  #       uses: ./.github/actions/update-tag
  #       id: update-tag
  #       with:
  #         ENV: ${{ env.ENV }}
  #         BOT_NAME: ${{ env.BOT_NAME }}
  #         BOT_EMAIL: ${{ env.BOT_EMAIL }}
  #         REPO_BRANCH: ${{ env.REPO_BRANCH }}
  #         # Private runner token
  #         #REPO_TOKEN: ${{ steps.app-token.outputs.token }}
  #         REPO_TOKEN: ${{ secrets.GIT_PAT }}
  #         REPO_DEPLOY: ${{ env.REPO_DEPLOY }}
  #         REPO_DEPLOY_PROJECT: ${{ env.REPO_DEPLOY_PROJECT }}
  #         VALUE_ENV_TAG_PATH: ${{ env.VALUE_ENV_TAG_PATH }}
  #         VALUE_ENV_TAG_FILE: ${{ env.VALUE_ENV_TAG_FILE }}
  #         COMMIT_MESSAGE: ${{ env.COMMIT_MESSAGE }}

    # # Step 6: Checkout appofapps repository to update image tag
    # - name: Checkout appofapps repository
    #   uses: actions/checkout@v4
    #   with:
    #     repository: dsegurakaliop/appofapps
    #     ref: main
    #     path: appofapps
    #     persist-credentials: true
    #     token: ${{ secrets.GIT_PAT }}
    #     fetch-depth: 0

    # # Step 7: Update image tag in Helm values
    # - name: Update image tag in Helm values
    #   run: |
    #     # Update the image tag in the preprod.yaml Helm values file using sed
    #     cat ./appofapps/argocd-apps/testdidier/helm-values/frontend/preprod.yaml
    #     sed -i 's|image.tag: ".*"|image.tag: "${{ github.sha }}"|' ./appofapps/argocd-apps/testdidier/horsprod/preprod.yaml
        
    #     git config user.name "GitHub Actions"
    #     git config user.email "actions@github.com"
    #     git commit -am "Update image tag to ${GITHUB_SHA}"
    #     git push origin main

    # Step 8: Install ArgoCD CLI to trigger sync
    # - name: Install ArgoCD CLI
    #   run: |
    #     curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
    #     chmod +x /usr/local/bin/argocd

    # # Step 9: Trigger ArgoCD sync to deploy new image
    # - name: Trigger ArgoCD sync
    #   run: |
    #     # Use ArgoCD CLI to trigger a sync
    #     argocd app sync preprod-testdidier --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}